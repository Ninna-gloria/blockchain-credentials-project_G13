/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MyTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MIN_MINT_SIGNATURES"
      | "MIN_WITHDRAW_SIGNATURES"
      | "TOKEN_CONVERSION_RATE"
      | "allowance"
      | "approve"
      | "approveMint"
      | "approveWithdrawal"
      | "balanceOf"
      | "buyTokens"
      | "confirmationCounts"
      | "confirmations"
      | "decimals"
      | "executeMint"
      | "executedTransactions"
      | "mintConfirmationCounts"
      | "mintExecuted"
      | "multiSigAddresses"
      | "name"
      | "owner"
      | "proposeMint"
      | "renounceOwnership"
      | "requestWithdrawal"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "withdrawalNonce"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "FundsWithdrawn"
      | "MintApproved"
      | "MintRequested"
      | "OwnershipTransferred"
      | "TokensBought"
      | "TokensMinted"
      | "TokensReceivedViaEth"
      | "Transfer"
      | "WithdrawalApproved"
      | "WithdrawalRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MIN_MINT_SIGNATURES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_WITHDRAW_SIGNATURES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_CONVERSION_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveWithdrawal",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "buyTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmationCounts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executedTransactions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintConfirmationCounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintExecuted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalNonce",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_MINT_SIGNATURES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_WITHDRAW_SIGNATURES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_CONVERSION_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmationCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executedTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintConfirmationCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSigAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalNonce",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [
    transactionId: BytesLike,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    transactionId: string,
    receiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    transactionId: string;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintApprovedEvent {
  export type InputTuple = [approver: AddressLike, amount: BigNumberish];
  export type OutputTuple = [approver: string, amount: bigint];
  export interface OutputObject {
    approver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintRequestedEvent {
  export type InputTuple = [minter: AddressLike, amount: BigNumberish];
  export type OutputTuple = [minter: string, amount: bigint];
  export interface OutputObject {
    minter: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBoughtEvent {
  export type InputTuple = [
    user: AddressLike,
    ethAmount: BigNumberish,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    ethAmount: bigint,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    ethAmount: bigint;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensMintedEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    initiator: AddressLike
  ];
  export type OutputTuple = [to: string, amount: bigint, initiator: string];
  export interface OutputObject {
    to: string;
    amount: bigint;
    initiator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensReceivedViaEthEvent {
  export type InputTuple = [
    user: AddressLike,
    ethAmount: BigNumberish,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    ethAmount: bigint,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    ethAmount: bigint;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalApprovedEvent {
  export type InputTuple = [transactionId: BytesLike, approver: AddressLike];
  export type OutputTuple = [transactionId: string, approver: string];
  export interface OutputObject {
    transactionId: string;
    approver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalRequestedEvent {
  export type InputTuple = [
    transactionId: BytesLike,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    transactionId: string,
    receiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    transactionId: string;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MyToken extends BaseContract {
  connect(runner?: ContractRunner | null): MyToken;
  waitForDeployment(): Promise<this>;

  interface: MyTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MIN_MINT_SIGNATURES: TypedContractMethod<[], [bigint], "view">;

  MIN_WITHDRAW_SIGNATURES: TypedContractMethod<[], [bigint], "view">;

  TOKEN_CONVERSION_RATE: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  approveMint: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveWithdrawal: TypedContractMethod<
    [transactionId: BytesLike, _receiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  buyTokens: TypedContractMethod<[], [void], "payable">;

  confirmationCounts: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  confirmations: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  executeMint: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executedTransactions: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  mintConfirmationCounts: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  mintExecuted: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  multiSigAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposeMint: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestWithdrawal: TypedContractMethod<
    [_receiver: AddressLike, _amount: BigNumberish],
    [string],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawalNonce: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MIN_MINT_SIGNATURES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_WITHDRAW_SIGNATURES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_CONVERSION_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveMint"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveWithdrawal"
  ): TypedContractMethod<
    [transactionId: BytesLike, _receiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyTokens"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "confirmationCounts"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "confirmations"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeMint"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executedTransactions"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintConfirmationCounts"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintExecuted"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "multiSigAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposeMint"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWithdrawal"
  ): TypedContractMethod<
    [_receiver: AddressLike, _amount: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawalNonce"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "MintApproved"
  ): TypedContractEvent<
    MintApprovedEvent.InputTuple,
    MintApprovedEvent.OutputTuple,
    MintApprovedEvent.OutputObject
  >;
  getEvent(
    key: "MintRequested"
  ): TypedContractEvent<
    MintRequestedEvent.InputTuple,
    MintRequestedEvent.OutputTuple,
    MintRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokensBought"
  ): TypedContractEvent<
    TokensBoughtEvent.InputTuple,
    TokensBoughtEvent.OutputTuple,
    TokensBoughtEvent.OutputObject
  >;
  getEvent(
    key: "TokensMinted"
  ): TypedContractEvent<
    TokensMintedEvent.InputTuple,
    TokensMintedEvent.OutputTuple,
    TokensMintedEvent.OutputObject
  >;
  getEvent(
    key: "TokensReceivedViaEth"
  ): TypedContractEvent<
    TokensReceivedViaEthEvent.InputTuple,
    TokensReceivedViaEthEvent.OutputTuple,
    TokensReceivedViaEthEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalApproved"
  ): TypedContractEvent<
    WithdrawalApprovedEvent.InputTuple,
    WithdrawalApprovedEvent.OutputTuple,
    WithdrawalApprovedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalRequested"
  ): TypedContractEvent<
    WithdrawalRequestedEvent.InputTuple,
    WithdrawalRequestedEvent.OutputTuple,
    WithdrawalRequestedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "FundsWithdrawn(bytes32,address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "MintApproved(address,uint256)": TypedContractEvent<
      MintApprovedEvent.InputTuple,
      MintApprovedEvent.OutputTuple,
      MintApprovedEvent.OutputObject
    >;
    MintApproved: TypedContractEvent<
      MintApprovedEvent.InputTuple,
      MintApprovedEvent.OutputTuple,
      MintApprovedEvent.OutputObject
    >;

    "MintRequested(address,uint256)": TypedContractEvent<
      MintRequestedEvent.InputTuple,
      MintRequestedEvent.OutputTuple,
      MintRequestedEvent.OutputObject
    >;
    MintRequested: TypedContractEvent<
      MintRequestedEvent.InputTuple,
      MintRequestedEvent.OutputTuple,
      MintRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokensBought(address,uint256,uint256)": TypedContractEvent<
      TokensBoughtEvent.InputTuple,
      TokensBoughtEvent.OutputTuple,
      TokensBoughtEvent.OutputObject
    >;
    TokensBought: TypedContractEvent<
      TokensBoughtEvent.InputTuple,
      TokensBoughtEvent.OutputTuple,
      TokensBoughtEvent.OutputObject
    >;

    "TokensMinted(address,uint256,address)": TypedContractEvent<
      TokensMintedEvent.InputTuple,
      TokensMintedEvent.OutputTuple,
      TokensMintedEvent.OutputObject
    >;
    TokensMinted: TypedContractEvent<
      TokensMintedEvent.InputTuple,
      TokensMintedEvent.OutputTuple,
      TokensMintedEvent.OutputObject
    >;

    "TokensReceivedViaEth(address,uint256,uint256)": TypedContractEvent<
      TokensReceivedViaEthEvent.InputTuple,
      TokensReceivedViaEthEvent.OutputTuple,
      TokensReceivedViaEthEvent.OutputObject
    >;
    TokensReceivedViaEth: TypedContractEvent<
      TokensReceivedViaEthEvent.InputTuple,
      TokensReceivedViaEthEvent.OutputTuple,
      TokensReceivedViaEthEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WithdrawalApproved(bytes32,address)": TypedContractEvent<
      WithdrawalApprovedEvent.InputTuple,
      WithdrawalApprovedEvent.OutputTuple,
      WithdrawalApprovedEvent.OutputObject
    >;
    WithdrawalApproved: TypedContractEvent<
      WithdrawalApprovedEvent.InputTuple,
      WithdrawalApprovedEvent.OutputTuple,
      WithdrawalApprovedEvent.OutputObject
    >;

    "WithdrawalRequested(bytes32,address,uint256)": TypedContractEvent<
      WithdrawalRequestedEvent.InputTuple,
      WithdrawalRequestedEvent.OutputTuple,
      WithdrawalRequestedEvent.OutputObject
    >;
    WithdrawalRequested: TypedContractEvent<
      WithdrawalRequestedEvent.InputTuple,
      WithdrawalRequestedEvent.OutputTuple,
      WithdrawalRequestedEvent.OutputObject
    >;
  };
}
