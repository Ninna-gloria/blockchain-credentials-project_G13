/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface UBaEducationCredentialsStoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "credentialExists"
      | "credentialFee"
      | "myToken"
      | "owner"
      | "renounceOwnership"
      | "storeCredentialHash"
      | "transferOwnership"
      | "updateCredentialFee"
      | "verifyCredential"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CredentialFeeUpdated"
      | "CredentialHashStored"
      | "CredentialVerified"
      | "FundsWithdrawn"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "credentialExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "credentialFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "myToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storeCredentialHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCredentialFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCredential",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "credentialExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credentialFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "myToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeCredentialHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCredentialFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace CredentialFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CredentialHashStoredEvent {
  export type InputTuple = [credentialHash: BytesLike, user: AddressLike];
  export type OutputTuple = [credentialHash: string, user: string];
  export interface OutputObject {
    credentialHash: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CredentialVerifiedEvent {
  export type InputTuple = [
    credentialHash: BytesLike,
    verifier: AddressLike,
    feePaid: BigNumberish
  ];
  export type OutputTuple = [
    credentialHash: string,
    verifier: string,
    feePaid: bigint
  ];
  export interface OutputObject {
    credentialHash: string;
    verifier: string;
    feePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UBaEducationCredentialsStore extends BaseContract {
  connect(runner?: ContractRunner | null): UBaEducationCredentialsStore;
  waitForDeployment(): Promise<this>;

  interface: UBaEducationCredentialsStoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  credentialExists: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  credentialFee: TypedContractMethod<[], [bigint], "view">;

  myToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  storeCredentialHash: TypedContractMethod<
    [_credentialJsonString: string],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCredentialFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifyCredential: TypedContractMethod<
    [_credentialJsonString: string],
    [boolean],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "credentialExists"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "credentialFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "myToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storeCredentialHash"
  ): TypedContractMethod<[_credentialJsonString: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCredentialFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyCredential"
  ): TypedContractMethod<
    [_credentialJsonString: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CredentialFeeUpdated"
  ): TypedContractEvent<
    CredentialFeeUpdatedEvent.InputTuple,
    CredentialFeeUpdatedEvent.OutputTuple,
    CredentialFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CredentialHashStored"
  ): TypedContractEvent<
    CredentialHashStoredEvent.InputTuple,
    CredentialHashStoredEvent.OutputTuple,
    CredentialHashStoredEvent.OutputObject
  >;
  getEvent(
    key: "CredentialVerified"
  ): TypedContractEvent<
    CredentialVerifiedEvent.InputTuple,
    CredentialVerifiedEvent.OutputTuple,
    CredentialVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CredentialFeeUpdated(uint256,uint256)": TypedContractEvent<
      CredentialFeeUpdatedEvent.InputTuple,
      CredentialFeeUpdatedEvent.OutputTuple,
      CredentialFeeUpdatedEvent.OutputObject
    >;
    CredentialFeeUpdated: TypedContractEvent<
      CredentialFeeUpdatedEvent.InputTuple,
      CredentialFeeUpdatedEvent.OutputTuple,
      CredentialFeeUpdatedEvent.OutputObject
    >;

    "CredentialHashStored(bytes32,address)": TypedContractEvent<
      CredentialHashStoredEvent.InputTuple,
      CredentialHashStoredEvent.OutputTuple,
      CredentialHashStoredEvent.OutputObject
    >;
    CredentialHashStored: TypedContractEvent<
      CredentialHashStoredEvent.InputTuple,
      CredentialHashStoredEvent.OutputTuple,
      CredentialHashStoredEvent.OutputObject
    >;

    "CredentialVerified(bytes32,address,uint256)": TypedContractEvent<
      CredentialVerifiedEvent.InputTuple,
      CredentialVerifiedEvent.OutputTuple,
      CredentialVerifiedEvent.OutputObject
    >;
    CredentialVerified: TypedContractEvent<
      CredentialVerifiedEvent.InputTuple,
      CredentialVerifiedEvent.OutputTuple,
      CredentialVerifiedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
